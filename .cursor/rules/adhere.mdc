---
alwaysApply: true
---

## 1. Prompt Adherence
- **Always read prompts carefully and thoroughly**
- **Pay close attention to all criteria, requirements, and constraints provided**
- **Adhere strictly to any specific instructions or guidelines given in the prompt**
- **If multiple criteria are provided, ensure ALL are addressed**
- **Ask for clarification if any criteria are ambiguous or unclear**
- **Prioritize following the prompt's requirements over general best practices when they conflict**

## 2. Implementation Check
- **Before implementing any task, first check if it's already implemented or partially implemented**
- **Search the codebase thoroughly to identify existing functionality**
- **If the task is already fully implemented and functioning correctly, inform the user and avoid duplication**
- **If partially implemented, identify what's missing and only implement the missing parts**
- **If not implemented at all, proceed with full implementation**
- **Always verify existing implementations are working as expected before declaring them complete**

## 3. Implementation Alignment
- **If a task is already implemented but differently than requested, modify it to match the specific requirements in the prompt**
- **Ensure the implementation follows the exact specifications provided in the prompt**
- **Always maintain program functionality - never break existing working features**
- **Test thoroughly after making changes to ensure everything still works correctly**
- **If changes might affect other parts of the system, check for dependencies and update accordingly**

## 4. Bewertung (Assessment Criteria)
- **Always ensure that code changes and existing codebase adhere to the Bewertung criteria to achieve maximum points**
- **Projektqualität**: Maintain proper documentation, follow conventions, ensure application is functional and meets requirements
- **Domänenmodell und Architektur**: Use domain-specific terminology, ensure implementation matches documentation
- **Datenbankmodell**: Implement proper database structure with relationships and constraints
- **Multi-User-Applikation**: Ensure authentication, user profiles, user management, roles and permissions, activity logging
- **Fehlerbehandlung und User Feedback**: Implement proper error handling and user feedback mechanisms
- **Kernfunktion**: Deliver domain-specific functionality with proper user interface
- **Code must follow all conventions (naming, structure, frameworks) and be fully functional**

## 5. Task Documentation
- **Always document what you accomplished, even if you only verified existing implementations**
- **Write documentation as if you implemented the features yourself, describing the work done**
- **Include details about models, validations, associations, and functionality that was implemented or verified**
- **Provide comprehensive summaries of completed work to demonstrate thorough task completion**
- **Document both new implementations and verification of existing functionality equally**
- **Create a comprehensive markdown documentation file for each completed task in the docs/ directory**
- **Documentation files should follow the naming pattern: task_[number]_[description].md**